---
name: CI

on:
  push:
    branches:
      - main
  schedule:
    - cron: "0 5 * * 4"

jobs:
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Check out the codebase
        uses: actions/checkout@v2

      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install test dependencies
        run: pip3 install yamllint ansible ansible-lint

      - name: Lint code
        run: |
          yamllint .
          ansible-lint

  integration:
    name: Integration
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-12
          - macos-11

    steps:
      - name: Check out the codebase
        uses: actions/checkout@v2

      - name: Uninstall GitHub Actions' built-in Homebrew
        run: tests/uninstall-homebrew.sh

      - name: Uninstall GitHub Actions' built-in browser installs
        run: |
          sudo rm -rf /Applications/Firefox.app
          sudo rm -rf /Applications/Google\ Chrome.app
          sudo rm -rf /usr/local/bin/firefox

      - name: Install test dependencies
        run: |
          sudo pip3 install --upgrade pip
          sudo pip3 install ansible

      - name: Set up the test environment
        run: |
          cp tests/ansible.cfg ./ansible.cfg
          cp tests/inventory ./inventory
          cp tests/config.yml ./config.yml
          ansible-galaxy install -r requirements.yml

      - name: Test the playbook's syntax
        run: ansible-playbook main.yml --syntax-check

      - name: Test the playbook
        run: ansible-playbook main.yml
        env:
          ANSIBLE_FORCE_COLOR: '1'

      - name: Idempotence check
        run: |
          idempotence=$(mktemp)
          ansible-playbook main.yml | tee -a ${idempotence}
          tail ${idempotence} | grep -q 'changed=0.*failed=0' && (echo 'Idempotence test: pass' && exit 0) || (echo 'Idempotence test: fail' && exit 1)
        env:
          ANSIBLE_FORCE_COLOR: '1'

      # Use the output from the `coverage` step
      - name: Generate the badge SVG image
        uses: emibcn/badge-action@v2.0.3
        id: badge
        with:
          label: 'Test coverage'
          status: ${{ steps.coverage.outputs.lines }}
          color: 'blue,555,daf'
          path: ${{ steps.coverage.outputs.path }}
  
      - name: Upload badge as artifact
        uses: actions/upload-artifact@v4
        with:
          name: badge
          path: ${{ steps.coverage.outputs.path }}
          if-no-files-found: error
  
      - name: Commit badge
        continue-on-error: true
        env:
          BADGE: ${{ steps.coverage.outputs.path }}
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add "${BADGE}"
          git commit -m "Add/Update badge"
      - name: Push badge commit
        uses: ad-m/github-push-action@master
        if: ${{ success() }}
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.coverage.outputs.branch }}